package day4;

/**
 * @author : zhousy
 * @date : 2022/10/24 11:39
 * @version : 1.0
 */

/**
 * 类加载与字节码技术
 *
 * 1.类文件结构
 * 2.字节码指令
 * 3.编译期处理
 * 4.类加载阶段
 * 5.类加载器
 * 6.运行期优化
 *      jvm将执行状态分为5个层次：
 *          0层，解释器解释执行
 *          1-3层，使用C1即时编译器编译执行(区别是带不带profiling[运行时手机程序状态的信息，例：方法调用的次数])
 *          4层使用C2即时编译器编译执行
 *      即时编译器和解释器的区别：
 *          解释器将字节编译成机器码，下次遇到相同字节码仍会重复的解释
 *          JIT和解释器相同，但是会将机器码存入CodeCache，下次遇到同样的代码直接执行，无需编译
 *          JIT会根据平台的类型不同生成优化的机器码，而解释器只是生成所有平台通用的机器码。
 *
 *      运行期的优化：
 *          逃逸分析：如果一个热点方法的循环中的变量没逃逸到循环外，也就是外界没有使用到，就可以直接省略来加快循环效率。
 *          方法内联：如果发现一个方法是热点方法，且内容很短，会进行内联，所谓的内联就是把方法内代码拷贝到调用者位置。
 * */
public class Test1 {
}
