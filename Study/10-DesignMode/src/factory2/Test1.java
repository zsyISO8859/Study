package factory2;

/**
 * @author : zhousy
 * @date : 2022/10/26 16:45
 * @version : 1.0
 */

/**
 * 简单工厂模式：
 *    实现： 定义一个工厂，它可以根据不同的参数返回不同的对象实例，被创建的实例通常都有相同的父类。
 *    例子：女娲造男人女人机器人，女娲是工厂类负责造各类对象，人类为接口 男人、女人、机器人实现人类的接口，
 *         当新增一种人类比如赛亚人的时候，只需要新增一个类实现人类接口，接着修改工厂获取对象逻辑即可。
 *         JDK-Calendar类中就使用了简单工厂模式
 *    场景：当我们会大量的创建某种某类对象时候就会用到工厂模式。
 *
 * 工厂方法模式：
 *    定义了一个创建对象的抽象方法，由子类决定要实例化的类。即工厂方法模式将对象的实例化推迟到子类。简单工厂模式需要修改工厂类，
 *       工厂方法模式是只需要修改客户端。
 *    提供一个用于创建对象的接口(工厂接口)，让其实现类(工厂实现类)决定实例化哪一个类(产品类)，并且由该实现类创建对应类的实例。
 *
 * 抽象工厂模式：
 *    抽象工厂模式就是将简单工厂模式的改进(或者称为进一步抽象)
 *    将工厂抽象成2层，抽象工厂和具体的工厂子类，更利于代码的维护和扩展。
 *    抽象工厂模式可以将简单工厂模式和工厂方法模式进行整合
 */
public class Test1 {
    public static void main(String[] args) {

    }
}
